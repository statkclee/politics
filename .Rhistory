require(stats); require(graphics)
summary(anscombe)
##-- now some "magic" to do the 4 regressions in a loop:
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
## or   ff[[2]] <- as.name(paste0("y", i))
##      ff[[3]] <- as.name(paste0("x", i))
mods[[i]] <- lmi <- lm(ff, data = anscombe)
print(anova(lmi))
}
## See how close they are (numerically!)
sapply(mods, coef)
lapply(mods, function(fm) coef(summary(fm)))
## Now, do what you should have done in the first place: PLOTS
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
install.packages("HistData")
library(HistData)
data(Galton)
###########################################################################
# sunflower plot with regression line and data ellipses and lowess smooth
###########################################################################
with(Galton,
{
sunflowerplot(parent,child, xlim=c(62,74), ylim=c(62,74))
reg <- lm(child ~ parent)
abline(reg)
lines(lowess(parent, child), col="blue", lwd=2)
if(require(car)) {
dataEllipse(parent,child, xlim=c(62,74), ylim=c(62,74), plot.points=FALSE)
}
})
View(Galton)
data(Nightingale)
# For some graphs, it is more convenient to reshape death rates to long format
#  keep only Date and death rates
require(reshape)
Night<- Nightingale[,c(1,8:10)]
melted <- melt(Night, "Date")
names(melted) <- c("Date", "Cause", "Deaths")
melted$Cause <- sub("\\.rate", "", melted$Cause)
melted$Regime <- ordered( rep(c(rep('Before', 12), rep('After', 12)), 3), levels=c('Before', 'After'))
Night <- melted
# subsets, to facilitate separate plotting
Night1 <- subset(Night, Date < as.Date("1855-04-01"))
Night2 <- subset(Night, Date >= as.Date("1855-04-01"))
## Not run:
require(ggplot2)
# Before plot
cxc1 <- ggplot(Night1, aes(x = factor(Date), y=Deaths, fill = Cause)) +
# do it as a stacked bar chart first
geom_bar(width = 1, position="identity", color="black") +
# set scale so area ~ Deaths
scale_y_sqrt()
# A coxcomb plot = bar chart + polar coordinates
cxc1 + coord_polar(start=3*pi/2) +
opts(title="Causes of Mortality in the Army in the East") +
xlab("")
# After plot
cxc2 <- ggplot(Night2, aes(x = factor(Date), y=Deaths, fill = Cause)) +
geom_bar(width = 1, position="identity", color="black") +
scale_y_sqrt()
cxc2 + coord_polar(start=3*pi/2) +
opts(title="Causes of Mortality in the Army in the East") +
xlab("")
# do both together, with faceting
cxc <- ggplot(Night, aes(x = factor(Date), y=Deaths, fill = Cause)) +
geom_bar(width = 1, position="identity", color="black") +
scale_y_sqrt() +
facet_grid(. ~ Regime, scales="free", labeller=label_both)
cxc + coord_polar(start=3*pi/2) +
opts(title="Causes of Mortality in the Army in the East") +
xlab("")
## End(Not run)
## What if she had made a set of line graphs?
colors <- c("blue", "red", "black")
with(Nightingale, {
plot(Date, Disease.rate, type="n", col="blue",
ylab="Annual Death Rate", xlab="Date", xaxt="n",
main="Causes of Mortality of the British Army in the East");
# background, to separate before, after
rect(as.Date("1854/4/1"), -10, as.Date("1855/3/1"),
1.02*max(Disease.rate), col="lightgray", border="transparent");
text( as.Date("1854/4/1"), .98*max(Disease.rate), "Before Sanitary\nCommission", pos=4);
text( as.Date("1855/4/1"), .98*max(Disease.rate), "After Sanitary\nCommission", pos=4);
# plot the data
points(Date, Disease.rate, type="b", col=colors[1]);
points(Date, Wounds.rate, type="b", col=colors[2]);
points(Date, Other.rate, type="b", col=colors[3])
}
)
# add custom Date axis and legend
axis.Date(1, at=seq(as.Date("1854/4/1"), as.Date("1856/3/1"), "4 months"), format="%b %Y")
legend(as.Date("1855/10/20"), 700, c("Disease", "Wounds", "Other"),
col=colors, fill=colors, title="Cause")
data(Minard.troops); data(Minard.cities)
## Not run:
require(ggplot2)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
# re-scale the plot window to an aspect ratio of ~ 4 x 1
windows(width=12, height=3)
plot_polished
## TODO: add the plot of temperature below
## End(Not run)
data(Minard.troops); data(Minard.cities)
## Not run:
require(ggplot2)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
# re-scale the plot window to an aspect ratio of ~ 4 x 1
windows(width=12, height=3)
plot_polished
## TODO: add the plot of temperature below
## End(Not run)
data(Minard.troops); data(Minard.cities)
## Not run:
require(ggplot2)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
# re-scale the plot window to an aspect ratio of ~ 4 x 1
windows(width=12, height=3)
plot_polished
## TODO: add the plot of temperature below
## End(Not run)
data(Minard.troops); data(Minard.cities)
## Not run:
require(ggplot2)
plot_troops <- ggplot(Minard.troops, aes(long, lat)) +
geom_path(aes(size = survivors, colour = direction, group = group))
plot_both <- plot_troops +
geom_text(aes(label = city), size = 4, data = Minard.cities)
plot_polished <- plot_both +
scale_size(to = c(1, 12),
breaks = c(1, 2, 3) * 10^5, labels = comma(c(1, 2, 3) * 10^5)) +
scale_colour_manual(values = c("grey50","red")) +
xlab(NULL) +
ylab(NULL)
# re-scale the plot window to an aspect ratio of ~ 4 x 1
windows(width=12, height=3)
plot_polished
## TODO: add the plot of temperature below
## End(Not run)
data(Langren1644)
## Not run:
require(maps)
require(ggplot2)
require(reshape)
require(plyr)
# set latitude to that of Toledo
Langren1644$Latitude <- 39.68
#          x/long   y/lat
bbox <- c( 38.186, -9.184,
43.692, 28.674 )
bbox <- matrix(bbox, 2, 2, byrow=TRUE)
borders <- as.data.frame(map("world", plot = FALSE,
xlim = expand_range(bbox[,2], 0.2),
ylim = expand_range(bbox[,1], 0.2))[c("x", "y")])
data(world.cities)
# get actual locations of Toledo & Rome
cities <- subset(world.cities,
name %in% c("Rome", "Toledo") & country.etc %in% c("Spain", "Italy"))
colnames(cities)[4:5]<-c("Latitude", "Longitude")
mplot <- ggplot(Langren1644, aes(Longitude, Latitude) ) +
geom_path(aes(x, y), borders, colour = "grey60") +
geom_point(y = 40) +
geom_text(aes(label = Name), y = 40.1, angle = 90, hjust = 0, size = 3)
mplot <- mplot +
geom_segment(aes(x=-4.03, y=40, xend=30, yend=40))
mplot <- mplot +
geom_point(data = cities, colour = "red", size = 2) +
geom_text(data=cities, aes(label=name), color="red", size=3, vjust=-0.5) +
coord_cartesian(xlim=bbox[,2], ylim=bbox[,1])
# make the plot have approximately aspect ratio = 1
windows(width=10, height=2)
mplot
## End(Not run)
if (require(ReadImages)) {
gimage <- read.jpeg(system.file("images", "google-toledo-rome3.jpg", package="HistData"))
plot(gimage)
# pixel coordinates of Toledo and Rome in the image, measured from the bottom left corner
toledo.map <- c(130, 59)
rome.map <- c(505, 119)
# confirm locations of Toledo and Rome
points(rbind(toledo.map, rome.map), cex=2)
# set a scale for translation of lat,long to pixel x,y
scale <- data.frame(x=c(130, 856), y=c(52,52))
rownames(scale)=c(0,30)
lines(scale)
xlate <- function(x) {
130+x*726/30
}
points(x=xlate(Langren1644$Longitude), y=rep(57, nrow(Langren1644)), pch=25, col="blue")
text(x=xlate(Langren1644$Longitude), y=rep(57, nrow(Langren1644)), labels=Langren1644$Name, srt=90, adj=c(0, 0.5), cex=0.8)
}
# show variation in estimates across graphs
library(lattice)
graph <- paste(Langren.all$Author, Langren.all$Year)
dotplot(Name ~ Longitude, data=Langren.all)
dotplot( as.factor(Year) ~ Longitude, data=Langren.all, groups=Name, type="o")
dotplot(Name ~ Longitude|graph, data=Langren.all, groups=graph)
# why the gap?
gap.mod <- glm(Gap ~ Year + Source + Latitude, family=binomial, data=Langren1644)
anova(gap.mod, test="Chisq")
data(Bowley)
# plot the data
with(Bowley,plot(Year, Value, type='b',
ylab="Value of British and Irish Exports",
main="Bowley's example of the method of smoothing curves"))
# find moving averages-- use center alignment (requires width=ODD)
require(gtools, warn.conflicts=FALSE)
mav3<-running(Bowley$Value, width=3, align="center")
mav5<-running(Bowley$Value, width=5, align="center")
mav9<-running(Bowley$Value, width=9, align="center")
lines(Bowley$Year[2:44], mav3, col='blue', lty=2)
lines(Bowley$Year[3:43], mav5, col='green3', lty=3)
lines(Bowley$Year[5:41], mav9, col='brown', lty=4)
# add lowess smooth
lines(lowess(Bowley), col='red', lwd=2)
require(ggplot2, warn.conflicts=FALSE)
qplot(Year,Value, data=Bowley)+geom_smooth()
example(Armada)
? Armada
View(Armada)
library(HistData)
devtools::install_github("rustyoldrake/WatsonR")
library(WatsonR)
.libPaths()
devtools::install_github("rustyoldrake/WatsonR")
install.packages("curl")
devtools::install_github("rustyoldrake/WatsonR")
devtools::install_github("rustyoldrake/WatsonR")
devtools::install_github("rustyoldrake/WatsonR")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
updateR()
sessionInfo()
install.packages("devtools")
install.packages("devtools")
devtools::install_github("")
install.packages("devtools")
install.packages("devtools")
install.packages("C:/Users/KwangChun/AppData/Local/Temp/RtmpUVB2MD/downloaded_packages/curl_1.2.tar.gz", repos = NULL, type = "source")
install.pacakges("mime")
install.packages("mime")
Package which is only available in source form, and may need compilation of
getOption('repos')
install.packages("mime", repo='http://cran.ism.ac.jp/')
install.packages("mime", repo='http://cran.ism.ac.jp/')
.libPaths( c( .libPaths(),'C:/Users/KwangChun/Documents/R/win-library/3.3')
)
install.packages("mime", repo='http://cran.ism.ac.jp/')
.libPaths()
.libPaths( c( .libPaths(),"C:/Program Files/R/R-3.3.1/library"))
install.packages("mime", repo='http://cran.ism.ac.jp/')
.libPaths()
.libPaths("C:/Program Files/R/R-3.3.1/library")
install.packages("mime", repo='http://cran.ism.ac.jp/')
.libPaths()
.libPaths("C:/Users/KwangChun/Documents/R/win-library/3.3")
install.packages("mime", repo='http://cran.ism.ac.jp/')
.libPaths()
.libPaths("C:/Users/KwangChun/Documents/R/win-library/3.3")
install.packages("mime", repo='http://cran.ism.ac.jp/')
.libPaths("~")
install.packages("mime", repo='http://cran.ism.ac.jp/')
devtools::install_github("rustyoldrake/WatsonR")
devtools::install_github("rasmusab/bayesian_first_aid")
library(BayesianFirstAid)
bayes.binom.test(c(39, 25))
devtools::install_github("rasmusab/bayesian_first_aid", quick=TRUE)
install_github('hadley/ggplot2')
devtools::install_github('hadley/ggplot2')
install.packages("tibble")
devtools::install_github('hadley/ggplot2')
install.packages("ggplot2")
install.packages("BayesianFirstAid")
library(BayesianFirstAid)
bayes.binom.test(c(39, 25))
devtools::install_github("rasmusab/bayesian_first_aid", quick=TRUE)
install.packages("devtools")
library(devtools)
library("sparklyr", lib.loc="~/R/win-library/3.3")
library("sparklyr", lib.loc="~/R/win-library/3.3")
devtools::github_install("rstudio/sparklyr")
devtools::install_github("rstudio/sparklyr")
library(sparklyr)
library(sparklyr)
config <- spark_config()
config[["sparklyr.defaultPackages"]] <- NULL
sc <- spark_connect(master = "local", config = config)
Sys.setenv(SPARK_HOME="C:/spark-1.6.2-bin-hadoop2.6")
library(sparklyr)
sc <- spark_connect(master = "local")
iris_tbl <- copy_to(sc, iris)
library(sparklyr)
iris_tbl <- copy_to(sc, iris)
library(dplyr)
iris_tbl <- copy_to(sc, iris)
# 1. spark 클러스터 실행
library(sparklyr)
library(dplyr)
# 2. SPARK_HOME 설정
Sys.setenv(SPARK_HOME="C:/spark-1.6.2-bin-hadoop2.6")
# 3. 스파크 클러스터 생성
config <- spark_config()
config[["sparklyr.defaultPackages"]] <- NULL
sc <- spark_connect(master = "local", config = config)
# 4. iris 데이터셋 불러오기ibrary(dplyr)
iris_tbl <- copy_to(sc, iris)
f <- factor(c(1, 5, 10, 2))
as.numeric(f)               ## wrong! and there is no warning...
as.numeric(as.character(f)) ## works...
as.numeric(levels(f))[f]    ## The recommended way.
levels(f)
as.numeric(levels(f))
class(as.numeric(levels(f)))
as.numeric(levels(f))[f]
class(as.numeric(levels(f))[f])
f
as.numeric(levels(f))[f]
exprmt <- factor(c("treat1", "treat2", "treat1", "treat3", "treat1", "control", "treat1", "treat2", "treat3"))
plot(exprmt)
barplot(exprmt)
str(exprmt)
glimpse(exprmt)
library(dplyr)
glimpse(exprmt)
exprmt <- factor(exprmt, levels=c("treat1", "treat2", "treat3", "control"))
glimpse(exprmt)
plot(exprmt)
surveys %>%
group_by(sex, species_id) %>%
summarize(mean_weight = mean(weight, na.rm = TRUE))
library(readr)
surveys <- read_csv("C:/Users/KwangChun/AppData/Local/lxss/home/statkclee/surveys.csv")
View(surveys)
surveys %>%
group_by(sex, species_id) %>%
summarize(mean_weight = mean(weight, na.rm = TRUE)) %>% head
surveys %>%
group_by(sex, species_id) %>%
summarize(mean_weight = mean(weight, na.rm = TRUE))
library(broom)
library(dplyr)
tidy_methods <- methods("tidy")
glance_methods <- methods("glance")
augment_methods <- methods("augment")
tidy_methods <- data.frame(class = sub("tidy[.]", "",
as.vector(tidy_methods)),
tidy = "x",
stringsAsFactors=FALSE)
glance_methods <- data.frame(class = sub("glance[.]", "",
as.vector(glance_methods)),
glance = "x",
stringsAsFactors = FALSE)
augment_methods <- data.frame(class = sub("augment[.]", "",
as.vector(augment_methods)),
augment = "x",
stringsAsFactors = FALSE)
TidyMethods <- left_join(tidy_methods, glance_methods) %>%
left_join(augment_methods) %>%
mutate(tidy = ifelse(is.na(tidy), "", tidy),
glance = ifelse(is.na(glance), "", glance),
augment = ifelse(is.na(augment), "", augment))
names(TidyMethods) <- c("Class", "`tidy`", "`glance`", "`augment`")
knitr::kable(TidyMethods)
View(augment_methods)
View(glance_methods)
tidy_methods
tidy_methods <- methods("tidy")
tidy_methods
library(broom)
library(dplyr)
data(Orange)
dim(Orange)
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
library(tidyverse)
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
(weight_kg <- 55)
weight_kg <- 57.5
2.2 * weight_kg
weight_lb <- 2.2 * weight_kg
weight_kg <- 100
weight_lb
weight_lb <- 2.2 * weight_kg
weight_lb
weight_kg <- 100
weight_lb
getwd()
download.file(url="http://www.nec.go.kr/portal/cmm/fms/FileDown.do?atchFileId=FILE_000000000061613&fileSn=1&bbsId=", file=".")
download.file(url="http://www.nec.go.kr/portal/cmm/fms/FileDown.do?atchFileId=FILE_000000000061613&fileSn=1&bbsId=")
download.file(url="http://www.nec.go.kr/portal/cmm/fms/FileDown.do?atchFileId=FILE_000000000061613&fileSn=1&bbsId=", destfile = ".")
install.packages("rgdal")
res <- google_directions(origin = c(-37.8179746, 144.9668636),
destination = c(-37.81659, 144.9841),
mode = "walking",
key = "AIzaSyA-XNGlV930_VerH8EVP7vgmviSoVcrZz8")
library(googleway)
library(ggmap)
google_directions(origin = "Flinders Street Station, Melbourne",
destination = "MCG, Melbourne",
mode = "walking",
key = "AIzaSyAJ_RX2cEAvhs89cxMbyLQ4mCR_qOJejWo")
res <- google_directions(origin = c(-37.8179746, 144.9668636),
destination = c(-37.81659, 144.9841),
mode = "walking",
key = "AIzaSyA-XNGlV930_VerH8EVP7vgmviSoVcrZz8")
listviewer::jsonedit(res, mode="view")
res
res$routes
df <- res$routes
View(df)
? google_directions
# 1. 판교 테크노밸리 --------------------------------------------------
company <- data.frame(year=c("2012", "2013", "2014", "2015"),
num_company = c(634, 870, 1002, 1121))
employee <- data.frame(year=c("2012", "2013", "2014", "2015"),
num_emp = c(30801, 58188, 70577, 72820))
# 단위: 조
revenue <- data.frame(year=c("2013", "2014", "2015"),
revenue=c(54, 69, 70))
sml <- tibble(type=c("대기업", "중견기업", "중소-기타"),
`2013`=c(24, 64, 782),
`2014`=c(37, 99, 866),
`2015`=c(30, 54, 1037))
View(company)
View(employee)
View(revenue)
setwd("D:/docs/politics")
library(plotly)
