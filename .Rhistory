install.packages("knitr")
install.packages("ggplot2")
install.packages("dplyr")
setwd("~/Dropbox/CodeforSeoul")
data <- read_csv("Open Data Day - EAT! - 박민식.csv")
library(ggmap)
library(readr)
library(readr)
# get the input data
#infile <- "input"
#data <- read.csv(paste0('./', infile, '.csv'))
data <- read_csv("Open Data Day - EAT! - 박민식.csv")
data
data
data <- tbl_df(data)
data
names(data)
names(data) <- c("name","party","restaurant", "address", "type", "amt")
addresses = data$Address
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 1 hour at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(60*60)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
print("Found temp file - resuming from index:")
geocoded <- readRDS(tempfilename)
startindex <- nrow(geocoded)
print(startindex)
}
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
# saveRDS(geocoded, tempfilename)
}
source('~/Dropbox/CodeforSeoul/google-geocoding-bloogers.R', echo=TRUE)
install.packages("RJSONIO")
install.packages("RJSONIO")
install.packages("RJSONIO")
install.packages("RJSONIO")
getGeoCode <- function(gcStr)
{
library(“RJSONIO”) #Load Library
gcStr <- gsub(‘ ‘,’%20′,gcStr) #Encode URL Parameters
#Open Connection
connectStr <- paste(‘http://maps.google.com/maps/api/geocode/json?sensor=false&address=’,gcStr, sep=””)
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=””))
getGeoCode <- function(gcStr) {
library(“RJSONIO”) #Load Library
getGeoCode <- function(gcStr) {
gcStr <- gsub(‘ ‘,’%20′,gcStr) #Encode URL Parameters
#Open Connection
connectStr <- paste(‘http://maps.google.com/maps/api/geocode/json?sensor=false&address=’,gcStr, sep=””)
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=””))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
lat <- data.json[“results.geometry.location.lat”]
lng <- data.json[“results.geometry.location.lng”]
gcodes <- c(lat, lng)
names(gcodes) <- c(“Lat”, “Lng”)
return (gcodes)
}
getGeoCode <- function(gcStr) {
gcStr <- gsub(' ','%20',gcStr) #Encode URL Parameters
#Open Connection
connectStr <- paste(‘http://maps.google.com/maps/api/geocode/json?sensor=false&address=’,gcStr, sep=””)
source('~/Dropbox/CodeforSeoul/google-geocoding-bloogers.R', echo=TRUE)
geoCodes
shortDS <-  read_csv("Open Data Day - EAT! - 박민식.csv")
library(readr)
shortDS <-  read_csv("Open Data Day - EAT! - 박민식.csv")
head(shortDS)
names(shortDS)
names(shortDS) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
shortDS <- with(shortDS, data.frame(address,
laply(address, function(val){getGeoCode(val)})))
library(dplyr)
shortDS <-  read_csv("Open Data Day - EAT! - 박민식.csv")
names(shortDS) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
shortDS <- with(shortDS, data.frame(address,
laply(address, function(val){getGeoCode(val)})))
getGeoCode(shortDS$address[1])
getGeoCode(shortDS$address[1:10])
test <-  getGeoCode(shortDS$address)
test <-  getGeoCode(shortDS$address[3])
test <-  getGeoCode(shortDS$address[3])
test
test <-  getGeoCode(shortDS$address[10])
test
shortDS <- with(shortDS, data.frame(address,
laply(address, function(val){getGeoCode(val)})))
library(plyr)
shortDS <- with(shortDS, data.frame(address,
laply(address, function(val){getGeoCode(val)})))
shortDS
library(dplyr)
open.dat <-  read_csv("Open Data Day - EAT! - 박민식.csv")
names(open.dat) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
open.dat
open.dat %>%
mutate(lonlat = laply(address, function(val){getGeoCode(val)}))
res <- open.dat %>%
mutate(lonlat = laply(address, function(val){getGeoCode(val)}))
res
View(res)
shortDS
library(leaflet)
? leaflet
m = leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
m %>% fitBounds(125.04, 33.06, 131.52, 38.27)
m = m %>% clearBounds()
m %>% addPopups(shortDS$Lat, shortDS$Lng 'Random popups')
shortDS$Lat
str(shortDS)
m %>% addPopups(as.numeric(shortDS$Lat), as.numeric(shortDS$Lng), 'Random popups')
m %>% addPopups(as.numeric(shortDS$Lng), as.numeric(shortDS$Lat))
m %>% addPopups(as.numeric(shortDS$Lng), as.numeric(shortDS$Lat))
m %>% addPopups(as.numeric(shortDS$Lng), as.numeric(shortDS$Lat), popup="x")
m %>% fitBounds(125.04, 33.06, 131.52, 38.27)
as.numeric(shortDS$Lng)
shortDS$Lat
m = m %>% setView(126, 37, zoom = 17)
m
# use automatic bounds derived from lng/lat data
m = m %>% clearBounds()
m %>% fitBounds(125.04, 33.06, 131.52, 38.27)
m = m %>% setView(126, 37, zoom = 17)
m
m = m %>% setView(126, 37, zoom = 7)
m
m = m %>% clearBounds()
# popup
m %>% addPopups(as.numeric(shortDS$Lng), as.numeric(shortDS$Lat), popup="x")
as.numeric(shortDS$Lng)
shortDS$Lat
shortDS$Lng
as.numeric(shortDS$Lng)
m %>% addPopups(as.numeric(shortDS$Lng[1:10]), as.numeric(shortDS$Lat[1:10]), popup="x")
m %>% addPopups(as.numeric(levels(Lng))[Lng], as.numeric(levels(Lat))[Lat], popup="x")
as.numeric(levels(Lng))[Lng]
m %>% addPopups(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup="x")
m %>% addMarkers(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup="x")
? addMarkers
m %>% addPopups(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup=shortDS$address)
shortDS <- with(shortDS, data.frame(restaurant, address,
laply(address, function(val){getGeoCode(val)})))
names(shortDS) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
shortDS <-  read_csv("Open Data Day - EAT! - 박민식.csv")
names(shortDS) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
library(plyr)
shortDS <- with(shortDS, data.frame(restaurant, address,
laply(address, function(val){getGeoCode(val)})))
m %>% addPopups(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup=shortDS$restaurant)
m %>% addMarkers(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup=shortDS$restaurant)
geoCodes <- getGeoCode("Palo Alto,California")
geoCodes
shortDS <-  read_csv("Open Data Day - EAT! - 박민식.csv")
names(shortDS) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
shortDS <- with(shortDS, data.frame(restaurant, address,
laply(address, function(val){getGeoCode(val)})))
m %>% fitBounds(125.04, 33.06, 131.52, 38.27)
# move the center to Snedecor Hall
m = m %>% setView(126, 37, zoom = 7)
m
# use automatic bounds derived from lng/lat data
m = m %>% clearBounds()
# popup
m %>% addPopups(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup=shortDS$restaurant)
# marker
#m %>% addMarkers(rand_lng(), rand_lat())
m %>% addMarkers(as.numeric(levels(shortDS$Lng))[shortDS$Lng], as.numeric(levels(shortDS$Lat))[shortDS$Lat], popup=shortDS$restaurant)
getGeoCode <- function(gcStr) {
gcStr <- gsub(' ','%20',gcStr) #Encode URL Parameters
#Open Connection
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&address=',gcStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
lat <- data.json["results.geometry.location.lat"]
lng <- data.json["results.geometry.location.lng"]
gcodes <- c(lat, lng)
names(gcodes) <- c("Lat", "Lng")
return (gcodes)
}
geoCodes <- getGeoCode("Palo Alto,California")
geoCodes
shortDS <-  read_csv("Open Data Day - EAT! - 박민식.csv")
names(shortDS) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
library(plyr)
shortDS <- with(shortDS[1:3,], data.frame(restaurant, address,
laply(address, function(val){getGeoCode(val)})))
shortDS
setwd("~/Dropbox/CodeforSeoul")
library(plyr)
#install.packages("RJSONIO")
library("RJSONIO") #Load Library
library(readr)
library(dplyr)
# http://www.r-bloggers.com/geocode-your-data-using-r-json-and-google-maps-geocoding-apis/
getGeoCode <- function(gcStr) {
gcStr <- gsub(' ','%20',gcStr) #Encode URL Parameters
#Open Connection
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&address=',gcStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
lat <- data.json["results.geometry.location.lat"]
lng <- data.json["results.geometry.location.lng"]
gcodes <- c(lat, lng)
names(gcodes) <- c("lat", "lng")
return (gcodes)
}
geoCodes <- getGeoCode("Palo Alto,California")
geoCodes
open.dat <-  read_csv("Open Data Day - EAT! - 박민식.csv")
open.dat <-  read.csv("Open Data Day - EAT! - 박민식.csv", fileEncoding="UTF-8", head=TRUE)
names(open.dat) <- c("name", "party", "restaurant", "address", "type","amt", "etc")
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(address, function(val){getGeoCode(val)})))
View(open.dat)
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(address, function(lat,lng){reverseGeoCode(lat,lng)})))
reverseGeoCode <- function(latlng) {
latlngStr <-  gsub(' ','%20', paste(latlng, collapse=",")) #Collapse and Encode URL Parameters
#Open Connection
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=',latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return (address)
}
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(address, function(lat,lng){reverseGeoCode(lat,lng)})))
View(open.dat)
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(lat,lng, function(lat,lng){reverseGeoCode(lat,lng)})))
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(., function(lat,lng){reverseGeoCode(lat,lng)})))
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(c(lat,lng), function(lat,lng){reverseGeoCode(lat,lng)})))
open.dat <- with(open.dat[1:3,], data.frame(restaurant, address,
laply(c(lat,lng), function(c(lat,lng){reverseGeoCode(c(lat,lng)})))
setwd("~/swc/data-science")
library(ggplot2)
library(ggplot2)
ggplot(aes(x = year, y = life_exp)) + geom_jitter()
gapminder
library(gapminder)
